apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "randoli-agent.fullname" . }}
  namespace: {{ include "randoli-agent.namespace" . }}
  labels:
    app.kubernetes.io/name: {{ include "randoli-agent.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: randoli-agent
    {{- include "labels" . | nindent 4 }}
  {{- with .Values.statefulSetAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "randoli-agent.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: randoli-agent
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "randoli-agent.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: randoli-agent
    spec:
      volumes:
        - name: agent-pv
          persistentVolumeClaim:
            claimName: {{ include "randoli-agent.fullname" . }}
        - name: tls-certs
          secret:
            secretName: {{ .Values.global.secrets.cert }}
            items:
              - key: client-cert.pem
                path: client-cert.pem
              - key: client-key.pem
                path: client-key.pem
            defaultMode: 420
        - name: shared-migrations
          emptyDir: {}
        - name: gizmosql-tmp
          emptyDir: {}      
        {{- if and .Values.global.prometheus.tlsCertConfigmapName .Values.global.prometheus.tlsCertConfigmapKey }}
        - name: prometheus-tls-cert
          configMap:
            name: {{ .Values.global.prometheus.tlsCertConfigmapName }}
            items:
              - key: {{ .Values.global.prometheus.tlsCertConfigmapKey }}
                path: prometheus-service.crt
        {{- end }}
        {{- if .Values.extraVolumes }}
          {{- toYaml .Values.extraVolumes | nindent 8}}
        {{- end }}
      
      initContainers:
        - name: init
          {{- with .Values.image }}
          image: "{{- if .registry -}}{{ .registry }}/{{- end -}}{{ .repository }}{{- if (.digest) -}} @{{ .digest }}{{- else -}}:{{ default $.Chart.AppVersion .tag }} {{- end -}}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "copying migrations..."
              cp -r /migration-scripts/* /migrations/
              cp -r /migrate /migrations/migrate
          resources:
            requests:
              cpu: 50m
              memory: 128Mi    
          volumeMounts:
            - name: shared-migrations
              mountPath: /migrations
            - name: agent-pv
              mountPath: /persistence
        - name: migrate-db
          image: datacatering/duckdb:v1.2.0
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "waiting for migration scripts..." &&
              while [ ! -f /migrations/migrate ]; do sleep 1; done
              chmod +x /migrations/migrate
              ln -s /duckdb /bin/duckdb

              echo "running migrations..."
              /migrations/migrate /persistence/agent.db

              echo "setting up permissions..."
              chown :1001 /persistence/agent.db
              chmod 660 /persistence/agent.db
          resources:
            requests:
              cpu: 50m
              memory: 128Mi       
          volumeMounts:
            - name: shared-migrations
              mountPath: /migrations
            - name: agent-pv
              mountPath: /persistence
      containers:
        - name: randoli-agent
          {{- with .Values.image }}
          image: "{{- if .registry -}}{{ .registry }}/{{- end -}}{{ .repository }}{{- if (.digest) -}} @{{ .digest }}{{- else -}}:{{ default $.Chart.AppVersion .tag }} {{- end -}}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - |
              echo "Waiting for the FlightSQL server to be ready..."
              while ! nc -z localhost 31337; do
                sleep 1
              done
              echo "Starting agent..."
              exec /tmp/guvnor
          command:
            - /bin/sh
            - -c
          envFrom:
            - secretRef:
                name: {{ .Values.global.secrets.config }}
            - configMapRef:
                name: {{ include "randoli-agent.fullname" . }}-config
            {{- if .Values.extraEnvFrom }}
              {{- toYaml .Values.extraEnvFrom | nindent 12 }} 
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: agent-pv
              mountPath: /persistence
            - name: tls-certs
              mountPath: /app/certs
            {{- if and .Values.global.prometheus.tlsCertConfigmapName .Values.global.prometheus.tlsCertConfigmapKey }}
            - mountPath: /etc/ssl/certs/prometheus-service.crt
              name: prometheus-tls-cert
              subPath: prometheus-service.crt
              readOnly: false
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
              {{- toYaml .Values.extraVolumeMounts | nindent 12 }} 
            {{- end }}
          env:
            - name: FLIGHT_SQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "randoli-agent.fullname" . }}-db
                  key: username
            - name: FLIGHT_SQL_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "randoli-agent.fullname" . }}-db
                  key: password
          {{- if .Values.observability.traceConfig.opensearch.secretName }}
            - name: OPENSEARCH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.observability.traceConfig.opensearch.secretName }}
                  key: {{ .Values.observability.traceConfig.opensearch.usernameKeyRef }}
            - name: OPENSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.observability.traceConfig.opensearch.secretName }}
                  key: {{ .Values.observability.traceConfig.opensearch.passwordKeyRef }}      
         
          {{- end }}        
          {{- if or .Values.extraEnv .Values.global.prometheus.secretName }}
            {{- if and .Values.global.prometheus.secretName .Values.global.prometheus.usernameKey }}
            - name: PROMETHEUS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.prometheus.secretName }}
                  key: {{ .Values.global.prometheus.usernameKey }}
            {{- end }}
            {{- if and .Values.global.prometheus.secretName .Values.global.prometheus.passwordKey }}
            - name: PROMETHEUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.prometheus.secretName }}
                  key: {{ .Values.global.prometheus.passwordKey }}
            {{- else if and .Values.global.prometheus.secretName .Values.global.prometheus.bearerTokenKey }}
            - name: PROMETHEUS_BEARER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.prometheus.secretName }}
                  key: {{ .Values.global.prometheus.bearerTokenKey }}
            {{- end }}
            {{- if .Values.extraEnv }}
              {{- toYaml .Values.extraEnv | nindent 12 }}
            {{- end }}
          {{- end }}
        - name: gizmosql
          image: docker.io/randoli/gizmosql:v1.9.16
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - gizmosql_client --command Execute --host localhost --port 31337 --username
                "$GIZMOSQL_USERNAME" --password "$GIZMOSQL_PASSWORD" --query "SELECT 1503+1503"
                | grep -q 3006 || exit 1
          ports:
          - containerPort: 31337
          volumeMounts:
          - name: agent-pv
            mountPath: /persistence
          - name: gizmosql-tmp
            mountPath: /var/gizmosql-tmp    
          env:
          - name: GIZMOSQL_PATH
            value: /persistence/agent.db
          - name: GIZMOSQL_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ include "randoli-agent.fullname" . }}-db
                key: username
          - name: GIZMOSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "randoli-agent.fullname" . }}-db
                key: password
          - name: DATABASE_BACKEND
            value: duckdb
          - name: DATABASE_FILENAME
            value: /persistence/agent.db
          - name: TLS_ENABLED
            value: "0"
          - name: PRINT_QUERIES
            value: "0"
          - name: SECRET_KEY
            value: "randoli_db_test"
          - name: INIT_SQL_COMMANDS
            value: |
              PRAGMA memory_limit={{ .Values.db.flightEngine.memoryLimit | squote }};
              PRAGMA threads={{ .Values.db.flightEngine.threads }};
              PRAGMA temp_directory='/var/gizmosql-tmp';
              PRAGMA max_temp_directory_size={{ .Values.db.flightEngine.tempDirectorySize | squote }};
              PRAGMA preserve_insertion_order=false;
              CREATE SCHEMA IF NOT EXISTS insights_agent;
              PRAGMA schema='insights_agent';
              PRAGMA search_path='insights_agent';
          resources:
            {{- toYaml .Values.db.resources | nindent 12 }}
      serviceAccountName: {{ template "randoli-agent.serviceAccountName" . }}
      serviceAccount: {{ template "randoli-agent.serviceAccountName" . }}
      {{- if or .Values.tolerations .Values.global.tolerations }}
      tolerations:
        {{- with .Values.tolerations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.tolerations }}
        {{- toYaml . | nindent 8 }}
        {{- end }} 
      {{- end }}
      {{- if or .Values.nodeSelector .Values.global.nodeSelector }}
      nodeSelector:
        {{- with .Values.nodeSelector }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.nodeSelector }}
        {{- toYaml . | nindent 8 }}
        {{- end }} 
      {{- end }}
      {{- if or .Values.affinity .Values.global.affinity }}
      affinity:
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.global.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }} 
      {{- end }} 
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.securityContext }}
      securityContext: {{- toYaml . | nindent 8 }}
      {{- end }}