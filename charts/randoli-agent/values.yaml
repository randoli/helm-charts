global:
  networkCostMetrics:
    image:
      registry: docker.io
      repository: randoli/network-cost-metrics
      tag: "1.0.0"
      pullPolicy: Always
    metricGenerationInterval: 2m
    prometheusTimeout: 30s
    url:
  opencost:
    url: 
  openshift:
    enabled: false
  prometheus:
    install: true
    url: ""
    secretName: ""
    usernameKey: ""
    passwordKey: ""
    bearerTokenKey: token
    tlsInsecureSkipVerify: true
    tlsCertConfigmapName: ""
    tlsCertConfigmapKey: ""
  alerts:
    slack:
      channel: 
      api_url: 
  secrets:
    cert: randoli-agent-cert
    config: randoli-agent-secret
  nodeSelector:
  affinity:
  tolerations:
  daemonsets:
    nodeSelector:
    affinity:
    tolerations: 

observability:
  otel:
    operator: 
      #enabled: false
    #applyCRs: false
    applyTargetAllocator: true  
  logs:
    analyzers:
      enabled: true
  vector: 
    #enabled: false
  security: 
    #enabled: false
    #OFF|INTERVAL_SCANNING
    mode: 'INTERVAL_SCANNING'
    cronSpec: '0 10,20 * * *'
    imagePullSecrets: ""
  tracing:  
    #enabled: false
  netobserv: 
    #enabled: false
    #applyCRs: false
  traceConfig:
    storage:
      type: JAEGER
      url:
    opensearch:
      spanIndexPattern:
      rootSpanIndexPattern: 
      skipTlsVerify: false
      secretName:
      usernameKeyRef: 
      passwordKeyRef: 

costManagement:
  vpaOperator: 
    #enabled: false

rightsizing:
   recommender:
     extraArgs:
       pod-recommendation-min-cpu-millicores: 25
       pod-recommendation-min-memory-mb: 25

tags:
  observability: false
  costManagement: false


image:
  registry: docker.io
  repository: randoli/insights-agent
  tag: "1.17"
  digest: ""
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always

imagePullSecrets: []

labels:
  app: randoli-agent

deploymentAnnotations: {}

resources:
  limits:
    memory: 2Gi
  requests:
    cpu: 50m
    memory: 512Mi

db:
  resources:
    limits:
      memory: 2Gi
    requests:
      cpu: 50m
      memory: 256Mi
  flightEngine:
    memoryLimit: 1500MB
    threads: 2

anomalyDetection:
  # Defaults anomaly detection list contains detections for:
  # - memory usage spikes
  # - postgres transactions latency spikes
  # - postgres active connections spike
  # - JVM heap memory spike
  # - Golang heap memory usage spike
  defaultsQueries:
    enabled: true
  customQueries:
    # Path for user defined queries, queries should be in YAML format
    path: /prometheus


tektonPipeline:
  # Identifying tekton pipeline resource
  enabled: false

# -- Toleration labels for pod assignment
tolerations: []
# -- Node labels for pod assignment
nodeSelector: {}
# -- Affinity settings for pod assignment
affinity: {}
# -- Assign custom TopologySpreadConstraints rules
topologySpreadConstraints: []

extraEnv: []
extraEnvFrom: []

extraVolumes: []
  # - name: extra-queries
  #   configMap:
  #     name: extra-queries
extraVolumeMounts: []
  # - name: extra-queries
  #   mountPath: /prometheus

securityContext:
  fsGroup: 1001

storageClassName: 

serviceAccount:
  create: true
  # If not set and create is true, a name is generated using the fullname template
  # name: ""
  automountServiceAccountToken: true
  annotations: {}
  labels: {}

tracing:
  provisionDataStore:
    cassandra: false

  allInOne:
    enabled: true
    args:
      - "--badger.span-store-ttl=2h"
  storage:
    type: badger
    badger:
      ephemeral: false
      persistence:
        mountPath: /mnt/data
        useExistingPvcName: "randoli-jaeger-storage"
        size: 10Gi
  agent:
    enabled: false
  collector:
    enabled: false
  query:
    enabled: false

cert-manager:
  enabled: false
  crds: 
    enabled: true
  #namespace: "cert-manager"  

network:
  standaloneConsole:
    enable: true

  